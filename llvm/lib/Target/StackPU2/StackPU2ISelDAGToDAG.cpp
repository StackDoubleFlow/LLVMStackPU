//===- StackPU2ISelDAGToDAG.cpp - A dag to dag inst selector for StackPU2 -===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the AVR target.
//
//===----------------------------------------------------------------------===//

#include "StackPU2.h"
#include "StackPU2TargetMachine.h"
#include "MCTargetDesc/StackPU2MCTargetDesc.h"

#include "llvm/CodeGen/SelectionDAGISel.h"

#define DEBUG_TYPE "stackpu2-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to AVR MC instructions (in DAG form).
class StackPU2DAGToDAGISel : public SelectionDAGISel {
public:
  StackPU2DAGToDAGISel(StackPU2TargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(nullptr) {}

  StringRef getPassName() const override {
    return "StackPU2 DAG->DAG Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "StackPU2GenDAGISel.inc"

private:
  void Select(SDNode *N) override;

  const StackPU2Subtarget *Subtarget;
};

void StackPU2DAGToDAGISel::Select(SDNode *N) {
  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; N->dump(CurDAG); errs() << "\n");
    N->setNodeId(-1);
    return;
  }

  // See if subclasses can handle this node.
  // if (trySelect(N))
  //   return;

  // Select the default instruction
  SelectCode(N);
}

FunctionPass *createStackPU2ISelDag(StackPU2TargetMachine &TM,
                               CodeGenOpt::Level OptLevel) {
  return new StackPU2DAGToDAGISel(TM, OptLevel);
}

} // end namespace llvm